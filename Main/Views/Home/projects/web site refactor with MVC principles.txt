web site refactors with MVC principles.

This web site and the code that makes it. This site is a test bed for me to learn
web development techniques and a repository of my coding life. Why not show my work?
as I go. I hope to log my trials along the way as I find it helps me absorb the new 
material better and hopefully somebody else might find it useful in the future.

Issue: using a asp.net mvc project and implementing a static html site, with separate actions and views pages that only differed in the data. No Bueno.

My initial implementation was a mess. You can look at the original commits and see for yourself. While I had
All the scaffolding in place for an ASP.NET application, I implemented an old fashioned static web site, with hard coded pages everywhere. I wanted to learn MVC and ASP so the web site was chosen as the guinea pig.

The projects page was the first place I wanted to change. It’s a list of my projects with a link to a project detail page. It was hardcoded with all the projects, so if I needed to update or add a new one to the site, there was a lot of copy pasting going on.

First issue I see is the link calls a different action but if you look at the controller they all essentially do the same thing, call a new view with a name of the selected project. Instead I implemented a new action 
that takes a string parameter that I use to build the right view to call.



the projects page lists projects data and can link to each projects item page.  currently every time I wanted to add a new project I would need to copy an existing one and
then start changing the data to fit the new project. The layout would be the same, as you would expect because you usually like a consistent layout throughout the site.

Currently I have a separate Action method for each project item view in the home controller. Each action would then load a view that is hardcoded to the project.  We can do better.
First thing to change is all those actions with magic strings. 
I created a new action method that took a string as a parameter and then called the appropriate view. 
Then the action link in the view is changed to reflect the change.

Next issue was the view was hardcoded to display each project and every project block had identical layout, again only the data changed. We can do better.
I created a class to be used as a data struct to pass to the view from the model. This class holds data for each project and is stored as hard coded init in code for now.
3 strings, JobTitle, Title, and Path
This is the data needed to create my projects list and action links to the item pages.
Replaced the copied layout blocks with one inside a foreach loop that iterates through each project and builds the dynamic menu.

Next issue is the separate item project files. Again, similar layout (not quite identical) but different data. We can do better.
Instead of having a hard-coded page on the server, we can produce the page on the fly with the data stored on the server instead. Difference? No copied code with all the layouts the same, any change to the layout would need to touch every file, and having all the data in one place.  For now, it will be simply placed into single file that loads the project objects with all its data when needed.  

I would like to pass the Project object to the new view using the action link but that is not possible. The action link is a hyperlink really; it just builds the path using the parameters as routing info. So, it can only send text (other datatypes that can be converted to string as well)
So, send the index of the selected project and can then get the project from the Globals static class.

The current stuff is marked as well. Need to be able to break that up or just save the blob.
